#!/bin/bash
# Generate the list of combinations
combi3=(

    "1 2 3"
    "1 3 2"
    "2 1 3"
    "2 3 1"
    "3 1 2"
    "3 2 1"
)

combi5=(

    "1 2 3 5 4"
    "1 2 3 4 5"
    "1 2 4 3 5"
    "1 2 4 5 3"
    "1 2 5 3 4"
    "1 2 5 4 3"
    "1 3 2 4 5"
    "1 3 2 5 4"
    "1 3 4 2 5"
    "1 3 4 5 2"
    "1 3 5 2 4"
    "1 3 5 4 2"
    "1 4 2 3 5"
    "1 4 2 5 3"
    "1 4 3 2 5"
    "1 4 3 5 2"
    "1 4 5 2 3"
    "1 4 5 3 2"
    "1 5 2 3 4"
    "1 5 2 4 3"
    "1 5 3 2 4"
    "1 5 3 4 2"
    "1 5 4 2 3"
    "1 5 4 3 2"
    "2 1 3 4 5"
    "2 1 3 5 4"
    "2 1 4 3 5"
    "2 1 4 5 3"
    "2 1 5 3 4"
    "2 1 5 4 3"
    "2 3 1 4 5"
    "2 3 1 5 4"
    "2 3 4 1 5"
    "2 3 4 5 1"
    "2 3 5 1 4"
    "2 3 5 4 1"
    "2 4 1 3 5"
    "2 4 1 5 3"
    "2 4 3 1 5"
    "2 4 3 5 1"
    "2 4 5 1 3"
    "2 4 5 3 1"
    "2 5 1 3 4"
    "2 5 1 4 3"
    "2 5 3 1 4"
    "2 5 3 4 1"
    "2 5 4 1 3"
    "2 5 4 3 1"
    "3 1 2 4 5"
    "3 1 2 5 4"
    "3 1 4 2 5"
    "3 1 4 5 2"
    "3 1 5 2 4"
    "3 1 5 4 2"
    "3 2 1 4 5"
    "3 2 1 5 4"
    "3 2 4 1 5"
    "3 2 4 5 1"
    "3 2 5 1 4"
    "3 2 5 4 1"
    "3 4 1 2 5"
    "3 4 1 5 2"
    "3 4 2 1 5"
    "3 4 2 5 1"
    "3 4 5 1 2"
    "3 4 5 2 1"
    "3 5 1 2 4"
    "3 5 1 4 2"
    "3 5 2 1 4"
    "3 5 2 4 1"
    "3 5 4 1 2"
    "3 5 4 2 1"
    "4 1 2 3 5"
    "4 1 2 5 3"
    "4 1 3 2 5"
    "4 1 3 5 2"
    "4 1 5 2 3"
    "4 1 5 3 2"
    "4 2 1 3 5"
    "4 2 1 5 3"
    "4 2 3 1 5"
    "4 2 3 5 1"
    "4 2 5 1 3"
    "4 2 5 3 1"
    "4 3 1 2 5"
    "4 3 1 5 2"
    "4 3 2 1 5"
    "4 3 2 5 1"
    "4 3 5 1 2"
    "4 3 5 2 1"
    "4 5 1 2 3"
    "4 5 1 3 2"
    "4 5 2 1 3"
    "4 5 2 3 1"
    "4 5 3 1 2"
    "4 5 3 2 1"
    "5 1 2 3 4"
    "5 1 2 4 3"
    "5 1 3 2 4"
    "5 1 3 4 2"
    "5 1 4 2 3"
    "5 1 4 3 2"
    "5 2 1 3 4"
    "5 2 1 4 3"
    "5 2 3 1 4"
    "5 2 3 4 1"
    "5 2 4 1 3"
    "5 2 4 3 1"
    "5 3 1 2 4"
    "5 3 1 4 2"
    "5 3 2 1 4"
    "5 3 2 4 1"
    "5 3 4 1 2"
    "5 3 4 2 1"
    "5 4 1 2 3"
    "5 4 1 3 2"
    "5 4 2 1 3"
    "5 4 2 3 1"
    "5 4 3 1 2"
    "5 4 3 2 1"

)

echo "Testing with 3 numbers, things go easy here..."

for index in "${!combi3[@]}"; do
    combination=${combi3[index]}

    # Execute Push_swap with the combination and store the output
    output=$(./push_swap $combination)

    # Execute the checker and get the result
    result=$(echo "$output" | ./checker_linux $combination)

    # Count the number of commands executed
    num_commands=$(echo "$output" | wc -l)
    if [ "$num_commands" -gt 3 ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (not optimal): $combination\n"
        echo "Instructions:\\n$output"
    fi
    # Check if the result is KO and print the combination number
    if [ "$result" = "KO" ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (unsorted): $combination\n"
        echo "Instructions: \n$output"
    fi
done


: <<'END_COMMENT'
This is a multiline comment.
You can write multiple lines of text here.
These lines will be ignored by the interpreter.


echo "Testing with 5 numbers, things go easy here..."

for index in "${!combi5[@]}"; do
    combination=${combi5[index]}

    output=$(./push_swap $combination)
    result=$(echo "$output" | ./checker_linux $combination)
    num_commands=$(echo "$output" | wc -l)

    if [$num_commands -gt 12]; then
        echo -e "Combination number \e[31mFAILED\e[0m (not optimal): $(combination)\n"
    fi
    if [[ $result -eq "KO" ]]; then
        echo -e "Combination number \e[31mFAILED\e[0m (unsorted): $(combination)\n"
    fi


hundred_num = $(python3 ./nbgen.py 100)
output_hundred = $(./push_swap $hundred_num)
result_hundred = $(echo "$output_hundred" | ./checker_Mac $hundred_num)
num_commands=$(echo "$output_hundred" | wc -l)
if [$num_commands -gt 1200]; then
    echo -e "Combination w 100 \e[31mFAILED\e[0m (not optimal)\n"
fi
if [[ $result -eq "KO" ]]; then
    echo -e "Combination w 100 \e[31mFAILED\e[0m (unsorted)\n"
fi
done

END_COMMENT