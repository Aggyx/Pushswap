#!/bin/bash
# Generate the list of combinations

17 78 23 31 51 5 85 16 6 58 68 42 82 91 35 99 72 81 67 98 38 22 46 69 79 97 25 33 11 52 36 13 65 90 21 41 92 84 39 3 71 55 59 56 63 24 48 49 2 12 8 76 62 64 96 66 18 70 32 61 74 45 50 53 94 95 44 30 75 9 14 28 73 93 10 47 88 19 54 57 43 1 87 15 34 83 89 40 27 86 29 80 100 26 37 60 20 4 77 7 

combi3=(

    "1 3 2"
    "2 1 3"
    "2 3 1"
    "3 1 2"
    "3 2 1"
)

combi5=(
    "1 2 3 5 4"
    "1 2 4 5 3"
    "1 2 5 3 4"
    "1 2 5 4 3"
    "1 3 2 4 5"
    "1 3 2 5 4"
    "1 3 4 2 5"
    "1 3 4 5 2"
    "1 3 5 2 4"
    "1 3 5 4 2"
    "1 4 2 3 5"
    "1 4 2 5 3"
    "1 4 3 2 5"
    "1 4 3 5 2"
    "1 4 5 2 3"
    "1 4 5 3 2"
    "1 5 2 3 4"
    "1 5 2 4 3"
    "1 5 3 2 4"
    "1 5 3 4 2"
    "1 5 4 2 3"
    "1 5 4 3 2"
    "2 1 3 4 5"
    "2 1 3 5 4"
    "2 1 4 3 5"
    "2 1 4 5 3"
    "2 1 5 3 4"
    "2 1 5 4 3"
    "2 3 1 4 5"
    "2 3 1 5 4"
    "2 3 4 1 5"
    "2 3 4 5 1"
    "2 3 5 1 4"
    "2 3 5 4 1"
    "2 4 1 3 5"
    "2 4 1 5 3"
    "2 4 3 1 5"
    "2 4 3 5 1"
    "2 4 5 1 3"
    "2 4 5 3 1"
    "2 5 1 3 4"
    "2 5 1 4 3"
    "2 5 3 1 4"
    "2 5 3 4 1"
    "2 5 4 1 3"
    "2 5 4 3 1"
    "3 1 2 4 5"
    "3 1 2 5 4"
    "3 1 4 2 5"
    "3 1 4 5 2"
    "3 1 5 2 4"
    "3 1 5 4 2"
    "3 2 1 4 5"
    "3 2 1 5 4"
    "3 2 4 1 5"
    "3 2 4 5 1"
    "3 2 5 1 4"
    "3 2 5 4 1"
    "3 4 1 2 5"
    "3 4 1 5 2"
    "3 4 2 1 5"
    "3 4 2 5 1"
    "3 4 5 1 2"
    "3 4 5 2 1"
    "3 5 1 2 4"
    "3 5 1 4 2"
    "3 5 2 1 4"
    "3 5 2 4 1"
    "3 5 4 1 2"
    "3 5 4 2 1"
    "4 1 2 3 5"
    "4 1 2 5 3"
    "4 1 3 2 5"
    "4 1 3 5 2"
    "4 1 5 2 3"
    "4 1 5 3 2"
    "4 2 1 3 5"
    "4 2 1 5 3"
    "4 2 3 1 5"
    "4 2 3 5 1"
    "4 2 5 1 3"
    "4 2 5 3 1"
    "4 3 1 2 5"
    "4 3 1 5 2"
    "4 3 2 1 5"
    "4 3 2 5 1"
    "4 3 5 1 2"
    "4 3 5 2 1"
    "4 5 1 2 3"
    "4 5 1 3 2"
    "4 5 2 1 3"
    "4 5 2 3 1"
    "4 5 3 1 2"
    "4 5 3 2 1"
    "5 1 2 3 4"
    "5 1 2 4 3"
    "5 1 3 2 4"
    "5 1 3 4 2"
    "5 1 4 2 3"
    "5 1 4 3 2"
    "5 2 1 3 4"
    "5 2 1 4 3"
    "5 2 3 1 4"
    "5 2 3 4 1"
    "5 2 4 1 3"
    "5 2 4 3 1"
    "5 3 1 2 4"
    "5 3 1 4 2"
    "5 3 2 1 4"
    "5 3 2 4 1"
    "5 3 4 1 2"
    "5 3 4 2 1"
    "5 4 1 2 3"
    "5 4 1 3 2"
    "5 4 2 1 3"
    "5 4 2 3 1"
    "5 4 3 1 2"
    "5 4 3 2 1"

)

echo "Testing with 3 numbers, things go easy here..."

for index in "${!combi3[@]}"; do
    combination=${combi3[index]}

    # Execute Push_swap with the combination and store the output
    output=$(./push_swap $combination)
    # Execute the checker and get the result
    result=$(echo "$output" | ./tester/checker_Mac $combination)
    num_commands=$(echo "$output" | wc -l)
    if [ $num_commands -gt 3 ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (not optimal): $combination"
        echo "Instruction: "
        echo "$output"
    fi
    if [ "$result" = "KO" ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (unsorted): $combination\n"
    fi
done
echo -e " \e[32m Number 3 passed !! \e[0m "


echo "Testing with 5 numbers, things go easy here..."

for index in "${!combi5[@]}"; do

    combination=${combi5[index]}
    output=$(./push_swap $combination)
    result=$(echo "$output" | ./tester/checker_Mac $combination)
    num_commands=$(echo "$output" | wc -l)
    if [ $num_commands -gt 12 ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (not optimal): $combination"
    fi
    if [ "$result" = "KO" ]; then
        echo -e "Combination number \e[31mFAILED\e[0m (unsorted): $combination\n"
    fi
done

echo -e " \e[32m Number 5 passed !! \e[0m "

echo "Testing with 100 numbers, things get more complicated..."
for ((i=1; i<=5; i++)); do
    hundred_num=$( python3 ./tester/nbgen.py 100)
    output_hundred=$(./push_swap $hundred_num)
    result_hundred=$(echo "$output_hundred" | ./tester/checker_Mac $hundred_num)
    num_commands=$(echo "$output_hundred" | wc -l)
    if [ $num_commands -gt 1200 ]; then
        echo -e "Combination w 100 \e[31mFAILED\e[0m (not optimal)\n"
        echo "Instructions: $num_commands"
    fi
    if [ "$result" = "KO" ]; then
        echo -e "Combination w 100 \e[31mFAILED\e[0m (unsorted)\n"
    fi
done

echo "Testing with 500 numbers, things get more complicated..."
for ((i=1; i<=5; i++)); do
    hundred_num=$( python3 ./tester/nbgen.py 500)
    output_hundred=$(./push_swap $hundred_num)
    result_hundred=$(echo "$output_hundred" | ./tester/checker_Mac $hundred_num)
    num_commands=$(echo "$output_hundred" | wc -l)
    if [ $num_commands -gt 5500 ]; then
        echo -e "Combination w 500 \e[31mFAILED\e[0m (not optimal)\n"
        echo "Instructions: $num_commands"
    fi
    if [ "$result" = "KO" ]; then
        echo -e "Combination w 500 \e[31mFAILED\e[0m (unsorted)\n"
    fi
done


